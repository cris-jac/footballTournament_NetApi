using LaboratorioAws.DTO;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Model.Entities;
using Repository.Repositories;

namespace LaboratorioAws.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MatchesController : ControllerBase
    {
        private readonly UnitOfWork _unitOfWork;

        public MatchesController(UnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        [HttpGet("error-test")]
        public IActionResult GetError()
        {
            throw new Exception();
        }

        [HttpGet]
        public async Task<ActionResult> GetMatches()
        {
            var matches = await _unitOfWork.Matches.GetAll();

            List<MatchResponseDto> matchesResponse = new List<MatchResponseDto>();

            foreach (var match in matches)
            {
                var m = new MatchResponseDto
                {
                    Id = match.Id,
                    Club1 = match.Club1.Name,
                    Club2 = match.Club2.Name,
                    ScoreClub1 = match.ScoreClub1,
                    ScoreClub2 = match.ScoreClub2
                };

                matchesResponse.Add(m);
            }

            return Ok(matchesResponse);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<MatchInfoDto>> GetMatchInfo(int id)
        {
            var match = await _unitOfWork.Matches.GetId(id);

            if (match == null) return NotFound();

            MatchInfoDto matchDto = new MatchInfoDto
            {
                Id = match.Id,
                Tournament = match.Tournament.Name,
                Date = match.Date,
                Stadium = match.Stadium.Name,
                Club1 = match.Club1.Name,
                Club2 = match.Club2.Name,
                ScoreClub1 = match.ScoreClub1,
                ScoreClub2 = match.ScoreClub2,
                Referee = match.Referee,
                //Winner = match.Winner.Name,
                PublicAttendence = match.PublicAttendence
            };

            return Ok(matchDto);
        }

        [HttpPost]
        public async Task<ActionResult> CreateMatch(CreateMatchDto dto)
        {
            Match newMatch = new Match
            {
                TournamentId = dto.TournamentId,
                Date = dto.Date,
                Club1Id = dto.Club1Id,
                Club2Id = dto.Club2Id,
                StadiumId = dto.StadiumId,
                Referee = dto.Referee,
                PublicAttendence = dto.PublicAttendence         // Puede saberse con antelacion?
            };

            await _unitOfWork.Matches.Add(newMatch);
            await _unitOfWork.SaveAsync();

            return NoContent();
        }

        [HttpPut("{id}")]
        public async Task<ActionResult> UpdateMatchResults(int id, [FromBody] SetMatchResultsDto resultsDto)
        {
            // Check if match exists
            var existingMatch = await _unitOfWork.Matches.GetId(id);
            if (existingMatch == null) return NotFound();

            // Set match results
            existingMatch.ScoreClub1 = resultsDto.ScoreClub1;
            existingMatch.ScoreClub2 = resultsDto.ScoreClub2;

            // Save Match results
            _unitOfWork.Matches.Edit(existingMatch);
            await _unitOfWork.SaveAsync();

            // Get teams standings for Club1
            var club1Std = await _unitOfWork.Standings.GetStandingByClubId(existingMatch.Club1Id);
            // If not create standing
            if (club1Std == null)
            {
                Standing c1Standing = new Standing
                {
                    ClubId = existingMatch.Club1Id,
                    TournamentId = existingMatch.TournamentId
                };

                await _unitOfWork.Standings.Add(c1Standing);
                await _unitOfWork.SaveAsync();

                club1Std = await _unitOfWork.Standings.GetStandingByClubId(existingMatch.Club1Id);
            }

            // Get stadning for Club 2
            var club2Std = await _unitOfWork.Standings.GetStandingByClubId(existingMatch.Club2Id);
            // If not -> create standing
            if (club2Std == null)
            {
                Standing c2Standing = new Standing
                {
                    ClubId = existingMatch.Club2Id,
                    TournamentId = existingMatch.TournamentId
                };

                await _unitOfWork.Standings.Add(c2Standing);
                await _unitOfWork.SaveAsync();

                club2Std = await _unitOfWork.Standings.GetStandingByClubId(existingMatch.Club2Id);
            }

            // Independent of result standing data
            // Team 1
            //club1Std.MatchIds.Add(existingMatch.Id);
            if (club1Std.Matches == null)
            {
                club1Std.Matches = new List<Match>();
            }
            club1Std.Matches.Add(existingMatch);
            club1Std.GoalsFor += resultsDto.ScoreClub1;
            club1Std.GoalsAgainst += resultsDto.ScoreClub2;
            club1Std.PlayedMatches += 1;

            // Team 2
            //club2Std.MatchIds.Add(existingMatch.Id);
            if (club2Std.Matches == null)
            {
                club2Std.Matches = new List<Match>();
            }
            club2Std.Matches.Add(existingMatch);
            club2Std.GoalsFor += resultsDto.ScoreClub2;
            club2Std.GoalsAgainst += resultsDto.ScoreClub1;
            club2Std.PlayedMatches += 1;

            // Dependent of the result standing data
            if (resultsDto.ScoreClub1 > resultsDto.ScoreClub2)
            {
                club1Std.Wins += 1;
                club1Std.Points += 3;
                existingMatch.Winner = existingMatch.Club1;                 // Make club a winner

                club2Std.Losses += 1;
            }
            else if (resultsDto.ScoreClub2 > resultsDto.ScoreClub1)
            {
                club2Std.Wins += 1;
                club2Std.Points += 3;
                existingMatch.Winner = existingMatch.Club2;                 // Make club a winner

                club1Std.Losses += 1;
            }
            else
            {
                club1Std.Draws += 1;
                club1Std.Points += 1;

                club2Std.Draws += 1;
                club2Std.Points += 1;
            }

            // Save standings
            _unitOfWork.Matches.Edit(existingMatch);
            _unitOfWork.Standings.Edit(club1Std);
            _unitOfWork.Standings.Edit(club2Std);
            await _unitOfWork.SaveAsync();

            return NoContent();
        }


    }
}
